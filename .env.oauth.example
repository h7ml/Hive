# 纯动态OAuth配置指南
# HiveChat现在支持完全动态的OAuth配置！无需任何预定义提供商

# ==============================================
# 完全动态OAuth系统
# ==============================================

# ✨ 特性：
# - 支持任意OAuth 2.0提供商
# - 运行时动态添加/删除/修改
# - 无需修改代码或重新部署
# - 完全自定义的用户信息映射
# - 支持高级OAuth配置选项

# ==============================================
# 快速开始
# ==============================================

# 1. 初始化数据库
#    npm run initdb

# 2. 通过API添加OAuth提供商
#    POST /api/auth/oauth-providers/register

# 3. 示例：添加GitHub OAuth
# curl -X POST /api/auth/oauth-providers/register \
#   -H "Content-Type: application/json" \
#   -d '{
#     "id": "github",
#     "name": "GitHub",
#     "authorizationUrl": "https://github.com/login/oauth/authorize",
#     "tokenUrl": "https://github.com/login/oauth/access_token",
#     "userinfoUrl": "https://api.github.com/user",
#     "scopes": "user:email",
#     "profileMapping": {
#       "id": "id",
#       "name": "name",
#       "email": "email",
#       "image": "avatar_url"
#     },
#     "clientId": "your_github_client_id",
#     "clientSecret": "your_github_client_secret",
#     "enabled": true
#   }'

# ==============================================
# 支持的OAuth提供商示例
# ==============================================

# 任何符合OAuth 2.0标准的提供商都可以添加：
# - GitHub, GitLab, Bitbucket
# - Google, Microsoft, Apple
# - Discord, Slack, Spotify
# - LinkedIn, Facebook, Twitter
# - 企业内部SSO系统
# - 自定义OAuth服务器

# ==============================================
# 高级配置示例
# ==============================================

# 企业SSO系统：
# {
#   "id": "company-sso",
#   "name": "公司SSO",
#   "authorizationUrl": "https://sso.company.com/oauth2/authorize",
#   "tokenUrl": "https://sso.company.com/oauth2/token",
#   "userinfoUrl": "https://sso.company.com/api/userinfo",
#   "scopes": "openid profile email",
#   "profileMapping": {
#     "id": "sub",
#     "name": "preferred_username",
#     "email": "email"
#   },
#   "config": {
#     "checks": ["state", "pkce"],
#     "additionalParams": {
#       "prompt": "consent"
#     }
#   }
# }

# 自定义OAuth服务器：
# {
#   "id": "my-oauth",
#   "name": "My OAuth Server",
#   "authorizationUrl": "https://oauth.example.com/authorize",
#   "tokenUrl": "https://oauth.example.com/token",
#   "userinfoUrl": "https://oauth.example.com/userinfo",
#   "scopes": "read write",
#   "profileMapping": {
#     "id": "user_id",
#     "name": "display_name",
#     "email": "email_address",
#     "image": "profile_picture"
#   }
# }

# ==============================================
# 企业OAuth提供商（传统支持）
# ==============================================

# 仅保留企业级OAuth提供商的环境变量支持
FEISHU_AUTH_STATUS=OFF
FEISHU_CLIENT_ID=your_feishu_client_id
FEISHU_CLIENT_SECRET=your_feishu_client_secret

WECOM_AUTH_STATUS=OFF
WECOM_CLIENT_ID=your_wecom_client_id
WECOM_CLIENT_SECRET=your_wecom_client_secret
WECOM_AGENT_ID=your_wecom_agent_id

DINGDING_AUTH_STATUS=OFF
DINGDING_CLIENT_ID=your_dingding_client_id
DINGDING_CLIENT_SECRET=your_dingding_client_secret

# ==============================================
# API端点
# ==============================================

# 获取OAuth提供商模板
# GET /api/auth/oauth-providers/templates

# 注册新的OAuth提供商
# POST /api/auth/oauth-providers/register

# 获取当前启用的OAuth提供商
# GET /api/auth/oauth-providers

# 管理OAuth提供商（需要管理员权限）
# GET /api/admin/oauth-providers
# PUT /api/admin/oauth-providers/{id}
# DELETE /api/admin/oauth-providers/{id}

# ==============================================
# 注意事项
# ==============================================

# 1. 回调URL格式：{NEXTAUTH_URL}/api/auth/callback/{provider_id}
# 2. 添加新OAuth提供商后会自动清理缓存
# 3. 支持嵌套字段映射，如 "user.profile.name"
# 4. 所有OAuth 2.0提供商都支持，无需预定义
# 5. 完全向后兼容现有企业OAuth配置